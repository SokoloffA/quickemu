name: Build AppImage

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LANG: en_US.UTF-8
  LS_ALL: en_US.UTF-8
  LANGUAGE: en_US:en
  PACKAGES: qemu bash coreutils ovmf grep jq lsb-base procps python3 genisoimage usbutils util-linux sed spice-client-gtk libtss2-tcti-swtpm0 wget xdg-user-dirs zsync unzip

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Set env
      run: |
        echo "RELEASE_DATE=$(date +%Y.%m.%d_%H.%M.%S)" >> ${GITHUB_ENV}
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

        [[ "${GITHUB_REF_TYPE}"  = "tag" ]] && echo APPIMAGE_NAME="quickemu-${GITHUB_REF_NAME:1}-x86_64.AppImage" >> $GITHUB_ENV
        [[ "${GITHUB_REF_TYPE}" != "tag" ]] && echo APPIMAGE_NAME="quickemu-$(date +%Y.%m.%d_%H.%M.%S)-x86_64.AppImage" >> $GITHUB_ENV

        echo "==============================="
        export
        echo "-------------------------------"
        cat $GITHUB_ENV
        echo "==============================="

    - uses: actions/checkout@v3

    - name: Install packages
      run:  |
        echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
        sudo apt-get -y update
        sudo apt-get -y install locales
        sudo sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
        sudo apt-get -y install qemu bash coreutils ovmf grep jq lsb-base procps python3 genisoimage usbutils util-linux sed spice-client-gtk libtss2-tcti-swtpm0 wget xdg-user-dirs zsync unzip

    - name: Install packages
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        for PACKAGE in ${PACKAGES}; do \
          echo " * Install ${PACKAGE}"; \
          apt-get -y download ${PACKAGE}; \
          dpkg-deb --extract ${PACKAGE}*.deb ./app; \
          rm -rf ${PACKAGE}*.deb; \
        done


    # - name: Build AppImage dir
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     for PACKAGE in ${PACKAGES}; do echo " * Install ${PACKAGE}"; apt-get -y download ${PACKAGE}; dpkg-deb --extract ${PACKAGE}*.deb  c=$(which "$prog"); dest=${src#/}; cp -f "${src}" "usr/bin/"; done

    #     cp -f "" "usr/bin/"; done

    #     echo "==============================="
    #     export PATH=~/tools/appimage/usr/bin:$PATH
    #     export LD_LIBRARY_PATH=~/tools/appimage/usr/lib
    #     echo "= Create symlinks ============="
    #     ln -sf usr/bin/flacon AppRun
    #     ln -sf usr/share/icons/hicolor/128x128/apps/flacon.png .
    #     ln -sf ./flacon.png  ./.DirIcon
    #     ln -sf usr/share/applications/flacon.desktop .
    #     echo "= Add programs ================"
    #     for prog in ${PROGRAMS}; do echo " * Copy ${prog}"; src=$(which "$prog"); dest=${src#/}; cp -f "${src}" "usr/bin/"; done
    #     echo "= Build image ================="
    #     linuxdeploy --verbosity=3  --plugin qt --appdir "${{github.workspace}}/build/app"

    # - name: Check AppImage dir
    #   run: |
    #     /bin/bash ~/tools/appdir-lint.sh ${{github.workspace}}/build/app

    # - name: Check external programs
    #   working-directory: ${{github.workspace}}
    #   run: |
    #     scripts/check-extprograms.sh . ${{github.workspace}}/build/app/usr/bin

    # - name: Build AppImage file
    #   working-directory: ${{github.workspace}}/build/app
    #   run: |
    #     appimagetool "${{github.workspace}}/build/app" "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"


    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APPIMAGE_NAME }}
        path: "${{github.workspace}}/build/${{ env.APPIMAGE_NAME }}"
